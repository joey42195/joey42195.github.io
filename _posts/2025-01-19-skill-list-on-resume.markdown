---
layout: post
title:  "技能要多熟才敢寫上履歷表？"
date:   2025-01-19 20:00:00 +0800
categories: 所思所想
---

文章的標題，真的是我長年在糾結的問題。

這個問題，我有請教過常上台發表，相當有知名的大神，得到的答案是，其實這對他們來說不會是問題，他們甚至能夠敢於跟面試官說，某項技術我不是很熟，但你要我改 code 我會改。

喔，不，也許面試的時候，根本不會有人問他們技術問題了，因為平時的發表，可能就已經足夠確定他們很強了，問了可能會有不敬神的感覺（笑）

我也在工作中看過頂大的實習生，個人部落格上洋洋灑灑列了至少20項語言或框架，每項都寫「熟練」，是真的嗎... 我真的不知道，也只覺得果然是初生之犢不畏虎，相當有自信！

也許是我不夠自信，在履歷表上，我只敢寫：

- Ruby on Rails
- HTML/CSS/JS
- Vue.js
- Git

過往我寫過很多年的 C / C++/ Objective-C，比較老一點的工程師，可能聽過「侯捷」這位「左手程式，右手詩」的作譯者，當年我是他的小書迷，買了他每一本 C++ 的書籍。但今天如果要我在履歷上寫專長 C++，我是不敢的。已經數年沒寫，不熟練了。但如果給我時間複習，我相信會很快進入狀況，以每天2個小時來說，我認為大約 2~3 週就可以恢復過往程度。

Ruby 語言，因我曾經拜讀過 Meta programming 這本書，偶爾會在工作中用上 refinements 這項技術，為何會這麼喜歡用它？ 因為曾經寫過 Objectiv-C，發現到 Ruby 的 refinements 等同於 Objective-C 中的 category 機制（當然細節仍有些差異）都是一種在「不需使用繼承」的行為下，為已存在的類別，加入新 methods 的一種擴充機制（至於為何要這樣做，何時做能帶來好處，這篇文章就不討論）。

但在工作中，實際上整間公司，可能只有我有在用 refinements 寫 code，有遇過主管會不喜歡我這樣做，他認為別的同事會看不懂，包括寫 yield 都會被禁止（笑）。

但我曾在面試時，被即時上機考 Ruby 寫 1 到 100 相加，結果我因為平時都沒在用 (1..100) 這個語法，所以沒這樣答，因而被評為不熟 Ruby（笑），但真心問各位客官，大家平常在做專案的時候，(1..100) 這種 Range Operator（學名）會用到幾次？大家應該都是在操作 model ORM，切版 CURD 畫面居多，幾乎不會用到對吧？有啦，可能寫測試的時候，放一些假資料時會用到。如果忘記用法，翻一下文件或是教學書，馬上就可以知道怎麼用對吧？

而實際上在工作中又剛好相反，各位一定有遇到，突然被指派接手維護一個例如 React 專案，但之前壓根沒碰過 React，還是得硬上，而且沒有時間讓你準備。這就是面試與實務的矛盾，實際工作中，技能半生不熟也是得接下任務！

當年在從事 C++ 工作時，我也擔任過面試者，我比較常請面試者解釋「觀念」，譬如：解釋什麼是物件導向的多型、封裝與虛擬函式？ Ruby 的 yield 是什麼？ 在什麼狀況下會想用 yield？ 你學過 C++ 跟 Ruby，你對它們之間的差異性有什麼心得嗎？

另外，其實我也不喜歡時下流行的刷 leecode，對此的批評聲浪，網路已眾多，這裡也不復述了（明明就是自己沒在練怕被考，笑）
